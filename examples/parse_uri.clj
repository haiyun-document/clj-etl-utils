(ns parse-uri
  (:use   [clojure.contrib.pprint :only (pprint)])
  (:require [clj-etl-utils.landmark-parser :as lp]
            [clojure.contrib.str-utils :as str]
            [clojure.contrib.duck-streams :as ds]))

(def *uri* "http://www.nanpa.com/number_resource_info/ani_ii_assignments.html")

;; (def *page* (ds/slurp* *uri*))

;; (pprint (lp/html-table->matrix *page*))


(defn convert-to-xsd [rows]
  (str
   "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<!--
  Generated by http://github.com/kyleburton/clj-etl-utils/examples/parse_uri.clj from \"http://www.nanpa.com/number_resource_info/ani_ii_assignments.html\"
-->
<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"
  xmlns=\"http://www.tm-xml.org/XMLSchema/common\"
  version=\"1.0\"
  elementFormDefault=\"qualified\"
  attributeFormDefault=\"unqualified\">
  <xs:simpleType name=\"ISOCurrencyCodeType\">
    <xs:annotation>
      <xs:documentation>ISO 4217:2008</xs:documentation>
    </xs:annotation>
    <xs:restriction base=\"xs:NMTOKEN\">
"
   (str/str-join
    "\n"
    (map (fn [[k v]]
           (format
"        <xs:enumeration value=\"%s\">
           <xs:annotation>
             <xs:documentation><![CDATA[%s]]></xs:documentation>
           </xs:annotation>
        </xs:enumeration>"
             k v))
         rows))
"
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
"
))

;; (print (convert-to-xsd (lp/html-table->matrix *page*)))

;; (let [[s e] (.split "3-5" "-")] (str s e))
(defn- range-codes [range-str]
  (let [[s e] (.split range-str "-")
        start (Integer/parseInt s 10)
        end   (Integer/parseInt e 10)]
    (map #(format "%02d" %1)
         (range start (inc end)))))


(defn expand-ranges [rows]
  (loop [[row & rows] rows
         res []]
    (if (not row)
      res
      (do
        (let [[code descr] row]
          (if (.contains code "-")
            (recur (concat
                    (map #(assoc row 0 %1)
                         (range-codes code))
                    rows)
                   res)
            (recur rows (conj res row))))))))



(comment


 (clojure.contrib.duck-streams/spit
  "/tmp/ani-classes.xsd"
  (convert-to-xsd
   (expand-ranges
    (lp/html-table->matrix (lp/extract (lp/make-parser *page*) [[:fp "Digit Pair"] [:fp "</tr>"]] [[:ft "</table>"]])))))



)
